import random
import tkinter

class RandomBall():
    '''
    定义运动的球的类
    '''
    def __init__(self, canvas, scrnwidth, scrnheight):
        ''' canvas:画布，所有的内容都应该在画布上呈现出来，此处通过此变量传入scrnwidth/scrnheight屏幕宽高 '''
        self.canvas = canvas

        #  球出现的初始位置要随机，此处位置表示的球的圆心
        # xpos表示位置x坐标
        # ypos表示位置y坐标
        self.xpos = random.randint(10, int(scrnwidth)-20)
        self.ypos = random.randint(10, int(scrnheight)-20)
        # 定义球的运动速度
        # 模拟运动：不断擦掉原来画，然后再一个新的地方重新绘制
        # 此处xvelocity模拟x轴方向运动
        # 此处yvelocity模拟y轴方向运动
        self.xvelocity = random.randint(4,20)
        self.yvelocity = random.randint(4,20)

        # 定义屏幕的大小
        # 此处是屏幕的宽度和高度
        self.scrnwidth = scrnwidth
        self.scrnheight = scrnheight

        # 球的大小随机
        # 此处球的大小用半径表示
        self.radius = random.randint(20,120)

        # 定义颜色
        # RGB表示法：三个数字，每个数字的值是0-255之间，表示红绿蓝三个颜色的大小
        # 此处用lambda表达式
        c = lambda:random.randint(0,255)
        self.color = '#%02x%02x%02x'% (c(), c(), c())
    def create_ball(self):
        '''
        用构造函数定义的变量值，在canvas上画一个球
        '''
        # tkinter没有画图形函数
        # 只有一个画椭圆的函数，画椭圆需要定义两个坐标
        # 在一个长方形内画椭圆，我们只需定义左上角和右下角
        # 求两个坐标的方法是，已知圆心的坐标，则圆心坐标减去半径能求出
        # 已知圆心的坐标，则圆心坐标加上半径也能求出
        x1 = self.xpos - self.radius
        y1 = self.ypos - self.radius
        x2 = self.xpos + self.radius
        y2 = self.ypos + self.radius
        # fill 表示填充颜色
        # outline是外围边框颜色
        self.item = self.canvas.create_oval(x1, y1, x2, y2, fill=self.color, outline=self.color)
    def move_ball(self):
        # 移动球的时候，需要控制球的方向
        # 每次移动后，球都有一个新的坐标
        self.xpos += self.xvelocity
        self.ypos += self.yvelocity
        # 以下判断是否会撞球
        # 撞了墙就要回头
        if self.xpos + self.radius >= self.scrnwidth:
            # 撞到右墙
            self.xvelocity = -self.xvelocity
        if self.xpos - self.radius <=0:
            # 撞到左墙
            self.xvelocity = -self.xvelocity
        if self.ypos + self.radius >= self.scrnheight:
            # 撞到上墙
            self.yvelocity = -self.yvelocity
        if self.ypos - self.radius <=0:
            self.yvelocity = -self.yvelocity
            # 撞到下墙
        self.canvas.move(self.item, self.xvelocity, self.yvelocity)


class ScreenSaver():
    # 定义屏保的类可以被启动
    balls = list()

    def __init__(self):

        self.num_balls = random.randint(6, 20)
        self.root = tkinter.Tk()
        # 取消边框
        self.root.overrideredirect(1)
        # 任何鼠标移动都需要取消
        self.root.bind('<Motion>', self.myquit)
        # 任何键盘移动都需要取消
        self.root.bind('<Key>', self.myquit)
        # 得到屏幕大小规格
        w, h = self.root.winfo_screenwidth(), self.root.winfo_screenheight()
        # 创建画布，包括画布的归属，规格
        self.canvas = tkinter.Canvas(self.root, width=w, height=h)
        self.canvas.pack()
        # 在画布上画球
        for i in range(self.num_balls):

            ball = RandomBall(self.canvas, scrnwidth=w, scrnheight=h)
            ball.create_ball()
            self.balls.append(ball)
        self.run_screen_saver()
        self.root.mainloop()
    def run_screen_saver(self):
        for ball in self.balls:
            ball.move_ball()
            # after是200毫秒后启动一个函数，需要启动的函数是第二个参数
        self.canvas.after(200, self.run_screen_saver)

    def myquit(self,e):
        # 此处只是利用了时间处理机制
        # 实际上并不关心事件的类型
        self.root.destroy()

if __name__ == "__main__":
    ScreenSaver()
